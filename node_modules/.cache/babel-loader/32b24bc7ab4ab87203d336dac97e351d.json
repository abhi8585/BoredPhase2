{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\work\\\\Desktop\\\\Code\\\\BoredPhase2\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Home from \"./pages/Home\";\nimport Header from \"./pages/header\";\nimport ShowError from \"./components/Info/error\"; // import Particles from \"react-tsparticles\";\n// import logo from './logo.svg';\n// import './App.css';\n// import Home from './pages/home'\n// import Item from './pages/item'\n// import Header  from './pages/header';\n// import ModelInformation from './pages/model-information';\n// import Collection from './pages/collection';\n\nimport Web3 from \"web3\";\nimport AwesomeSlider from 'react-awesome-slider';\nimport 'react-awesome-slider/dist/styles.css'; // import { createRaribleSdk, RaribleSdk } from \"@rarible/protocol-ethereum-sdk\"\n// import React from 'react'\n// import { Web3Ethereum } from \"@rarible/web3-ethereum\";\n// import { Switch, Route } from 'react-router-dom'\n// import ModelCollection from './pages/model';\n// import CollectionSale from './pages/collection-sale';\n// import ItemCollection from './pages/item-collection';\n// import ItemCollectionCreated from './pages/item-collection-created';\n// import FileUpload from './pages/file-upload';\n// import ShowError from './pages/error';\n\nimport Particles from \"react-tsparticles\"; // import logo from './logo.svg';\n// import './App.css';\n\nimport particlesOptions from \"./particles.json\";\nimport ipfs from \"./components/Info/ipfs\";\nimport Particle from \"./pages/particle\";\nimport \"./App.scss\"; // const App = () => {\n//   return (\n//    <div>\n//       <Header></Header>\n//     <div className=\"App\">\n//       <Home />\n//     </div>\n//    </div>\n//   );\n// };\n// export default App;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setAccounts = this.setAccounts.bind(this);\n    this.particlesInit = this.particlesInit.bind(this);\n    this.particlesLoaded = this.particlesLoaded.bind(this);\n    this.setNetworkId = this.setNetworkId.bind(this);\n    this.getDataFromHash = this.getDataFromHash.bind(this);\n    this.getHash = this.getHash.bind(this);\n    this.state = {\n      provider: null,\n      accounts: [],\n      sdk: null,\n      web3: null,\n      networkId: null,\n      wineData: [],\n      itemData: null\n    };\n  }\n\n  particlesInit(main) {\n    console.log(main); // you can initialize the tsParticles instance (main) here, adding custom shapes or presets\n  }\n\n  particlesLoaded(container) {\n    console.log(container);\n  }\n\n  getHash() {}\n\n  getDataFromHash() {}\n\n  getItemData() {\n    var itemData = this.state.wineData[Math.floor(Math.random() * this.state.wineData.length)];\n    return itemData;\n  }\n\n  componentWillMount() {\n    // this.setState({ message: \"This is an updated message\" });\n    console.log(\"Component is Mounting\");\n    this.useEffect(); // this.getItemData()\n  }\n\n  async setWeb3Obj(web3) {\n    await this.setState({\n      web3\n    });\n  }\n\n  useEffect() {\n    if (window.ethereum) {\n      this.handleInit();\n      console.log(\"going in if\");\n    } else {\n      window.addEventListener('ethereum#initialized', this.handleInit, {\n        once: true\n      });\n      setTimeout(this.handleInit, 3000); // 3 seconds\n    }\n  }\n\n  async setProvider(currentProvider) {\n    await this.setState({\n      provider: currentProvider\n    });\n    console.log(this.state.provider);\n  }\n\n  async setAccounts(accounts) {\n    await this.setState({\n      accounts: accounts\n    });\n    console.log(this.state.accounts);\n  }\n\n  async setSdk(currentSdk) {\n    await this.setState({\n      sdk: currentSdk\n    });\n    console.log(this.state.sdk);\n  }\n\n  async setNetworkId(currentId) {\n    await this.setState({\n      networkId: currentId\n    });\n  }\n\n  async handleInit() {\n    const {\n      ethereum\n    } = window;\n    console.log(ethereum + \"eth obj\");\n\n    if (ethereum && ethereum.isMetaMask) {\n      console.log('Ethereum successfully detected!');\n      this.setProvider(ethereum); // add listener on accountsChanged event to render actual address\n      // ethereum.on('accountsChanged', this.state.accounts)\n\n      ethereum.on('accountsChanged', this.setAccounts); // ethereum.on('')\n      // \t// // configure web3\n\n      const web3 = new Web3(ethereum);\n      const networkId = await web3.eth.net.getId();\n      this.setNetworkId(networkId); // console.log(\"given provider\"+networkId)\n\n      await this.setWeb3Obj(web3); // // set current account if already connected\n\n      web3.eth.getAccounts().then(e => {\n        this.setAccounts(e);\n        console.log(e);\n      });\n    } else {\n      alert('Please install MetaMask!');\n    }\n  }\n\n  render() {\n    var _this$state$provider;\n\n    fetch('https://ipfs.io/ipfs/QmTBdefEdEK8sM2dqCdogdrGRiL9kzfdpk1dhewQRha31k').then(response => response.json()).then(data => console.log(data)); // if (this.state.networkId != 137 && this.state.networkId != 80001){\n    //   return(<ShowError message={\"Please Switch to Polygon Network & Reload!\"}/>)\n    //   return\n    // }\n    // if (networkId != 137 && networkId != 80001){\n    //   alert(\"Please switch to Polygon Network!\")\n    //   return\n    // }\n\n    if (!((_this$state$provider = this.state.provider) === null || _this$state$provider === void 0 ? void 0 : _this$state$provider.isMetaMask)) {\n      return /*#__PURE__*/_jsxDEV(ShowError, {\n        message: \"Please Install MetaMask!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 18\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Particle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            provider: this.state.provider,\n            accounts: this.state.accounts,\n            web3: this.state.web3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Home, {\n            provider: this.state.provider,\n            accounts: this.state.accounts,\n            web3: this.state.web3,\n            data: this.state.data\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/work/Desktop/Code/BoredPhase2/src/App.js"],"names":["React","Home","Header","ShowError","Web3","AwesomeSlider","Particles","particlesOptions","ipfs","Particle","App","Component","constructor","props","setAccounts","bind","particlesInit","particlesLoaded","setNetworkId","getDataFromHash","getHash","state","provider","accounts","sdk","web3","networkId","wineData","itemData","main","console","log","container","getItemData","Math","floor","random","length","componentWillMount","useEffect","setWeb3Obj","setState","window","ethereum","handleInit","addEventListener","once","setTimeout","setProvider","currentProvider","setSdk","currentSdk","currentId","isMetaMask","on","eth","net","getId","getAccounts","then","e","alert","render","fetch","response","json","data"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Home from \"./pages/Home\";\r\nimport Header from \"./pages/header\";\r\nimport ShowError from \"./components/Info/error\";\r\n// import Particles from \"react-tsparticles\";\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\n// import Home from './pages/home'\r\n// import Item from './pages/item'\r\n// import Header  from './pages/header';\r\n// import ModelInformation from './pages/model-information';\r\n// import Collection from './pages/collection';\r\nimport Web3 from \"web3\";\r\nimport AwesomeSlider from 'react-awesome-slider';\r\nimport 'react-awesome-slider/dist/styles.css';\r\n// import { createRaribleSdk, RaribleSdk } from \"@rarible/protocol-ethereum-sdk\"\r\n// import React from 'react'\r\n// import { Web3Ethereum } from \"@rarible/web3-ethereum\";\r\n// import { Switch, Route } from 'react-router-dom'\r\n// import ModelCollection from './pages/model';\r\n// import CollectionSale from './pages/collection-sale';\r\n// import ItemCollection from './pages/item-collection';\r\n// import ItemCollectionCreated from './pages/item-collection-created';\r\n// import FileUpload from './pages/file-upload';\r\n// import ShowError from './pages/error';\r\nimport Particles from \"react-tsparticles\";\r\n// import logo from './logo.svg';\r\n// import './App.css';\r\nimport particlesOptions from \"./particles.json\";\r\nimport ipfs from \"./components/Info/ipfs\";\r\nimport Particle from \"./pages/particle\";\r\n\r\n\r\nimport \"./App.scss\";\r\n// const App = () => {\r\n//   return (\r\n//    <div>\r\n//       <Header></Header>\r\n//     <div className=\"App\">\r\n      \r\n//       <Home />\r\n//     </div>\r\n//    </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.setAccounts = this.setAccounts.bind(this)\r\n    this.particlesInit = this.particlesInit.bind(this)\r\n    this.particlesLoaded = this.particlesLoaded.bind(this)\r\n    this.setNetworkId = this.setNetworkId.bind(this)\r\n    this.getDataFromHash = this.getDataFromHash.bind(this)\r\n    this.getHash = this.getHash.bind(this)\r\n    this.state = {\r\n\r\n      provider : null,\r\n      accounts : [],\r\n      sdk:null,\r\n      web3:null,\r\n      networkId:null,\r\n      wineData: [],\r\n      itemData : null\r\n\r\n    }\r\n  }\r\n\r\n  particlesInit(main){\r\n    console.log(main);\r\n\r\n    // you can initialize the tsParticles instance (main) here, adding custom shapes or presets\r\n  };\r\n\r\n  particlesLoaded(container){\r\n    console.log(container);\r\n  };\r\n\r\n  \r\n    getHash(){\r\n\r\n    }\r\n\r\n    getDataFromHash(){\r\n      \r\n\r\n    }\r\n\r\n    getItemData(){\r\n      var itemData = this.state.wineData[Math.floor(Math.random() * this.state.wineData.length)]\r\n      return itemData\r\n    }\r\n\r\n    componentWillMount() {\r\n\r\n      // this.setState({ message: \"This is an updated message\" });\r\n      console.log(\"Component is Mounting\")\r\n      this.useEffect()\r\n      \r\n        \r\n      // this.getItemData()\r\n  \r\n  }\r\n\r\n  async setWeb3Obj(web3){\r\n    await this.setState({ web3});\r\n  }\r\n\r\n    useEffect(){\r\n\r\n      if (window.ethereum) {\r\n        this.handleInit()\r\n        console.log(\"going in if\")\r\n      } else {\r\n        \r\n        window.addEventListener('ethereum#initialized', this.handleInit, {\r\n          once: true,\r\n        })\r\n        setTimeout(this.handleInit, 3000) // 3 seconds\r\n      }\r\n  \r\n    }\r\n\r\n    async setProvider(currentProvider){\r\n      await this.setState({ provider: currentProvider });\r\n      console.log(this.state.provider);\r\n    }\r\n  \r\n  \r\n    async setAccounts(accounts){\r\n      await this.setState({ accounts: accounts });\r\n      console.log(this.state.accounts);\r\n    }\r\n\r\n      async setSdk(currentSdk){\r\n      await this.setState({ sdk : currentSdk })\r\n      console.log(this.state.sdk);\r\n  }\r\n\r\n    async setNetworkId(currentId){\r\n      await this.setState({ networkId : currentId })\r\n    }\r\n\r\n    async handleInit(){\r\n    const { ethereum } = window\r\n    console.log(ethereum+\"eth obj\")\r\n\t\tif (ethereum && ethereum.isMetaMask) {\r\n\t\t\tconsole.log('Ethereum successfully detected!')\r\n\t\t\tthis.setProvider(ethereum)\r\n\r\n\t\t\t// add listener on accountsChanged event to render actual address\r\n\t\t\t// ethereum.on('accountsChanged', this.state.accounts)\r\n      ethereum.on('accountsChanged', this.setAccounts);\r\n      // ethereum.on('')\r\n    \r\n\t\t// \t// // configure web3\r\n\t\t\tconst web3 = new Web3(ethereum)\r\n      const networkId = await web3.eth.net.getId();\r\n      this.setNetworkId(networkId)\r\n      // console.log(\"given provider\"+networkId)\r\n      await this.setWeb3Obj(web3)\r\n\r\n\t\t\t// // set current account if already connected\r\n\t\t\tweb3.eth.getAccounts().then(e => {\r\n\t\t\t\tthis.setAccounts(e)\r\n        console.log(e)\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\talert('Please install MetaMask!')\r\n\t\t}\r\n  }\r\n    render() {\r\n      fetch('https://ipfs.io/ipfs/QmTBdefEdEK8sM2dqCdogdrGRiL9kzfdpk1dhewQRha31k')\r\n        .then(response => response.json())\r\n        .then(data => console.log(data));\r\n      // if (this.state.networkId != 137 && this.state.networkId != 80001){\r\n      //   return(<ShowError message={\"Please Switch to Polygon Network & Reload!\"}/>)\r\n      //   return\r\n      // }\r\n      // if (networkId != 137 && networkId != 80001){\r\n      //   alert(\"Please switch to Polygon Network!\")\r\n      //   return\r\n      // }\r\n        if(!this.state.provider?.isMetaMask){\r\n          return(<ShowError message={\"Please Install MetaMask!\"}/>)\r\n        }\r\n       else{\r\n        return (\r\n          <div>\r\n            {/* <Particles options={particlesOptions}/> */}\r\n          <Particle />\r\n          {/* <AwesomeSlider> */}\r\n        <div className=\"App\">\r\n        <Header provider={this.state.provider} accounts={this.state.accounts} web3={this.state.web3} />\r\n          <Home provider={this.state.provider} accounts={this.state.accounts} web3={this.state.web3}\r\n          data={this.state.data} \r\n          />\r\n          \r\n        </div>\r\n        {/* </AwesomeSlider> */}\r\n       {/* <Particles id=\"tsparticles\" url=\"http://foo.bar/particles.json\" init={this.particlesInit} loaded={this.particlesLoaded} /> */}\r\n       </div>\r\n        )\r\n       }\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}